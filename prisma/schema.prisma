// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                 String      @id @default(uuid())
  name               String
  email              String      @unique
  password           String
  role               UserRole    @default(PATIENT)
  Status             UserStatus  @default(ACTIVE)
  needChangePassword Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  admin              Admin?
  patient            Patient?
  doctor             Doctor?

  @@map("users")
}


model Patient {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  profilePhoto  String?
  address       String
  contactNumber String
  isDeleted     Boolean   @default(false)
  gender        Gender
  age           Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("patients")
}
model Doctor {
  id                  String    @id @default(uuid())
  name                String
  email               String    @unique
  profilePhoto        String?
  contactNumber       String
  address             String
  registrationNumber  String
  experience          Int       @default(0)
  gender              Gender
  age                 Int
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User     @relation(fields: [email], references: [email])

  @@map("doctors")
}

model Admin {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}





 enum UserRole {
  DOCTOR
  PATIENT
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum Gender {
  MALE
  FEMALE
}